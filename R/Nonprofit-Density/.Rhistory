print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
d <- get_ssr( df = dat, prog.serv.rev = c( "x1", "x2" ), total.expense = c( "x4", "x5" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1", "x2" ), total.expense = c( "x3", "x4" ) )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1", "x2" ), total.expense = c( "x3", "x4" ) )
# remove double quotes
rm_quote <- function( x ) {
gsub( "\"", "", x )
}
d <- get_ssr( df = dat, prog.serv.rev = c( "x1", "x2" ), total.expense = c( "x3", "x4" ) )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x3" ) )
dat
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c("x1"), total.expense = c("x2") )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" )
# quoted/unquoted arguments
if( !is.null( substitute( prog.serv.rev ) ) )   prog.serv.rev   <- rm_quote( deparse( substitute( prog.serv.rev ) ) )
if( !is.null( substitute( total.expense ) ) )   total.expense   <- rm_quote( deparse( substitute( total.expense ) ) )
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
p <- dat[[ prog.serv.rev ]]
prog.serv.rev
e <- dat[[ total.expense ]]
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# quoted/unquoted arguments
if( !is.null( substitute( prog.serv.rev ) ) )   prog.serv.rev   <- rm_quote( deparse( substitute( prog.serv.rev ) ) )
if( !is.null( substitute( total.expense ) ) )   total.expense   <- rm_quote( deparse( substitute( total.expense ) ) )
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( prog.serv.rev ) > 2 | length( prog.serv.rev ) < 1 )
{ stop( "`prog.serv.rev` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==1 ) {
p <- dat[[ prog.serv.rev[1] ]]
e <- dat[[ total.expense[1] ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
d <- get_ssr( df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
run only with 990 variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_08_REV_PROG_TOT_TOT", total.expense = "F9_09_EXP_TOT_TOT" )
#run only with 990-EZ variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_01_REV_PROG_TOT_CY", total.expense = "F9_01_EXP_TOT_CY" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense ="x2", winsorize=0.95 )
d <- get_ssr( dat_01, winsorize = 0.95 )
colnames( dat_01 )
d <- get_ssr( dat_01, winsorize = 0.95 ) # not working
df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" )
length(total.expense)
length(prog.serv.rev)
df = dat; prog.serv.rev = "x1"; total.expense = "x2"
length(prog.serv.rev)
length(prog.serv.rev)
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1" , total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1" , total.expense = "x2"  )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x4[ c(15,300,600) ] <- 0
d <- get_ssr( df = dat, prog.serv.rev = "x3", total.expense = "x4" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
d <- get_ssr( dat_01, prog.serv.rev = "F9_08_REV_PROG_TOT_TOT", total.expense = "F9_09_EXP_TOT_TOT" )
#run only with 990-EZ variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_01_REV_PROG_TOT_CY", total.expense = "F9_01_EXP_TOT_CY" )
d <- get_ssr( dat_01) # not working
d <- get_ssr( df = dat, prog.serv.rev = x1 , total.expense = c( x2 ) )
d <- get_ssr( df = dat, prog.serv.rev = x1, total.expense = x2 )
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( prog.serv.rev ) > 2 | length( prog.serv.rev ) < 1 )
{ stop( "`prog.serv.rev` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==1 ) {
p <- dat[[ prog.serv.rev ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
d <- get_ssr( df = dat, prog.serv.rev = c('x1'), total.expense = c('x2' ) )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
d <- get_ssr( dat_01) # not working
install.packages("rlang")
library(rlang)
install.packages('installr')
library(installr)
updateR()
installr()
updateR
updateR()
shiny::runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
# `cartogram_dorling` function will break if there are missing values in the weight parameter.
# no. of rows in this dataset should be ~3234 (one for each county in the US)
dat<-data.frame(x=c(1,2,3,4,5,6,8))
data%>%hist(x)
# `cartogram_dorling` function will break if there are missing values in the weight parameter.
# no. of rows in this dataset should be ~3234 (one for each county in the US)
dat<-data.frame(x=as.numeric(c(1,2,3,4,5,6,8)))
data%>%hist(x)
data%>%hist('x')
dat%>%hist(x)
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
# Import counties landing page map
main <- "/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/"
setwd( paste0( main, "np-density-dashboard/Data-Rodeo" ) )
## Cumulative county data
cnties <- readRDS( "Dashboard-County-Data/USA-Counties.rds" )
cnties$n
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
# Change line color and fill color
ggplot(cnties, aes(x=n))+
geom_histogram(color="darkblue", fill="lightblue")
?geom_histogram
# Change line color and fill color
ggplot(cnties, aes(x=n))+
geom_histogram(color="darkblue", fill="lightblue", bins = 40 ) +theme_minimal()
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
theme( text = element_text( family = "Avenir"))
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
theme( text = element_text( family = "Avenir") )
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") )
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") ) +
geom_density(alpha=.2, fill="#FF6666")
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") ) +
geom_density(alpha=.2)
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") ) +
geom_density()
# Change line color and fill color
ggplot( cnties, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") )
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(cnties$n)
# Import counties landing page map
main <- "/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/"
setwd( paste0( main, "np-density-dashboard/Data-Rodeo" ) )
## Cumulative county data
cnties <- readRDS( "Dashboard-County-Data/USA-Counties.rds" )
###---------------------------------------------------
###   SHINY APP--NONPROFIT DENSITY
###---------------------------------------------------
library( shiny )
library( tidyverse )
library( plotly )
library( bslib )
library( shinydashboard )
library( sf )
library( shinythemes )
library( shinyWidgets )
library( RColorBrewer )
library( urbnthemes )
library( leaflet )
summary(cnties$n)
data.frame( summary(cnties$n) )
as.data.frame( summary(cnties$n) )
summary(cnties$n)[1]
summary(cnties$n)['Mean']
Min = summary(cnties$n)['Min'
Min = summary(cnties$n)['Min']
Min = summary(cnties$n)['Min']
data.frame( Mean = summary(cnties$n)['Mean'],
Median = summary(cnties$n)['Median'],
Min = summary(cnties$n)['Min'],
Max = summary(cnties$n)['Max'])
summary(cnties$n)['Mean']
summary(cnties$n)['Median'],
summary(cnties$n)['Median']
summary(cnties$n)['Min']
data.frame( Mean = summary(cnties$n)['Mean'],
Median = summary(cnties$n)['Median'],
Min = summary(cnties$n)['Min.'],
Max = summary(cnties$n)['Max.'])
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
Standard Dev. = sd( cnties$n, na.rm = T) )
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
Standard Dev. = sd( cnties$n, na.rm = T) )
var( cnties$n, na.rm = T)
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
Standard Dev. = sd( cnties$n, na.rm = T) )
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T))
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
Std Dev = sd( cnties$n, na.rm = T) )
data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
SD = sd( cnties$n, na.rm = T) )
round( data.frame( Mean = mean( cnties$n, na.rm = T),
Median = median( cnties$n, na.rm = T),
Min = min( cnties$n, na.rm = T),
Max = max( cnties$n, na.rm = T),
Variance = var( cnties$n, na.rm = T),
SD = sd( cnties$n, na.rm = T) ), digits = 2 )
lp.plot.hist <- function( df ){
ggplot( df, aes( x = n ) )+
geom_histogram( color="darkblue", fill="lightblue", bins = 40 ) +
theme_minimal()+
ylab( "Frequency") +
xlab( "# New Nonprofits per County")+
ggtitle( "Distribution of County Nonprofits")+
theme( text = element_text( family = "Avenir") )
}
lp.plot.hist(cnties)
# landing page summary stats
lp.tbl <- function( df ){
round( data.frame( Mean = mean( df$n, na.rm = T),
Median = median( df$n, na.rm = T),
Min = min( df$n, na.rm = T),
Max = max( df$n, na.rm = T),
Variance = var( df$n, na.rm = T),
SD = sd( df$n, na.rm = T) ), digits = 2 )
}
lp.tbl(cnties)
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
