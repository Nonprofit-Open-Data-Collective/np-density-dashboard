d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" )
# quoted/unquoted arguments
if( !is.null( substitute( prog.serv.rev ) ) )   prog.serv.rev   <- rm_quote( deparse( substitute( prog.serv.rev ) ) )
if( !is.null( substitute( total.expense ) ) )   total.expense   <- rm_quote( deparse( substitute( total.expense ) ) )
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
p <- dat[[ prog.serv.rev ]]
prog.serv.rev
e <- dat[[ total.expense ]]
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# quoted/unquoted arguments
if( !is.null( substitute( prog.serv.rev ) ) )   prog.serv.rev   <- rm_quote( deparse( substitute( prog.serv.rev ) ) )
if( !is.null( substitute( total.expense ) ) )   total.expense   <- rm_quote( deparse( substitute( total.expense ) ) )
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( prog.serv.rev ) > 2 | length( prog.serv.rev ) < 1 )
{ stop( "`prog.serv.rev` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==1 ) {
p <- dat[[ prog.serv.rev[1] ]]
e <- dat[[ total.expense[1] ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
d <- get_ssr( df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
run only with 990 variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_08_REV_PROG_TOT_TOT", total.expense = "F9_09_EXP_TOT_TOT" )
#run only with 990-EZ variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_01_REV_PROG_TOT_CY", total.expense = "F9_01_EXP_TOT_CY" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense ="x2", winsorize=0.95 )
d <- get_ssr( dat_01, winsorize = 0.95 )
colnames( dat_01 )
d <- get_ssr( dat_01, winsorize = 0.95 ) # not working
df = dat; prog.serv.rev = c( "x1" ); total.expense = c( "x2" )
length(total.expense)
length(prog.serv.rev)
df = dat; prog.serv.rev = "x1"; total.expense = "x2"
length(prog.serv.rev)
length(prog.serv.rev)
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
d <- get_ssr( df = dat, prog.serv.rev = c( "x1" ), total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1" , total.expense = c( "x2" ) )
d <- get_ssr( df = dat, prog.serv.rev = "x1" , total.expense = "x2"  )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x4[ c(15,300,600) ] <- 0
d <- get_ssr( df = dat, prog.serv.rev = "x3", total.expense = "x4" )
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
d <- get_ssr( dat_01, prog.serv.rev = "F9_08_REV_PROG_TOT_TOT", total.expense = "F9_09_EXP_TOT_TOT" )
#run only with 990-EZ variable names
d <- get_ssr( dat_01, prog.serv.rev = "F9_01_REV_PROG_TOT_CY", total.expense = "F9_01_EXP_TOT_CY" )
d <- get_ssr( dat_01) # not working
d <- get_ssr( df = dat, prog.serv.rev = x1 , total.expense = c( x2 ) )
d <- get_ssr( df = dat, prog.serv.rev = x1, total.expense = x2 )
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
#' # neither numerator nor denominator specified
#' d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = NULL )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = c('a','b','c'), total.expense = 'a' )
#'
#' # column names vector not of correct length
#' d <- get_ssr( df = dat, prog.serv.rev = 'a', total.expense = c( 'a', 'b', 'c' ) )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = c( 'F9_08_REV_PROG_TOT_TOT', 'F9_01_REV_PROG_TOT_CY' ),
total.expense = c( 'F9_09_EXP_TOT_TOT', 'F9_01_EXP_TOT_CY' ),
winsorize=0.98 )
{
# function checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
if( length( prog.serv.rev ) > 2 | length( prog.serv.rev ) < 1 )
{ stop( "`prog.serv.rev` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
if( length( total.expense ) > 2 | length( total.expense ) < 1 )
{ stop( "`total.expense` must be a single quoted or unquoted string or a vector with a minimum length of one and maximum length of two." ) }
# copy data
dat <- df
if ( length( prog.serv.rev )==2 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ is.na( dat[ prog.serv.rev[2] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ is.na( dat[ prog.serv.rev[1] ] )==F, 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
# create a column that concatenates two denominator variables into single column
dat[ is.na( dat[ total.expense[2] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ is.na( dat[ total.expense[1] ] )==F, 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==2 & length( total.expense )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[2] ] )==F ), prog.serv.rev[2] ]
dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), 'p' ] <- dat[ which( is.na( dat[ prog.serv.rev[1] ] )==F ), prog.serv.rev[1] ]
p <- dat[[ 'p' ]]
e <- dat[[ total.expense ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ total.expense[2] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[2] ] )==F ), total.expense[2] ]
dat[ which( is.na( dat[ total.expense[1] ] )==F ), 'e' ] <- dat[ which( is.na( dat[ total.expense[1] ] )==F ), total.expense[1] ]
p <- dat[[ prog.serv.rev ]]
e <- dat[[ 'e' ]]
}
else if ( length( prog.serv.rev )==1 & length( total.expense )==1 ) {
p <- dat[[ prog.serv.rev ]]
e <- dat[[ total.expense ]]
}
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- data.frame( cbind( df, SSR ) )
return( df.ssr )
}
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = 'x2' )
d <- get_ssr( df = dat, prog.serv.rev = c('x1'), total.expense = c('x2' ) )
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT',
'F9_01_REV_PROG_TOT_CY', 'F9_01_EXP_TOT_CY')
d <- get_ssr( dat_01) # not working
install.packages("rlang")
library(rlang)
install.packages('installr')
library(installr)
updateR()
installr()
updateR
updateR()
setwd("/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome")
dir.create( "R")
dir.create( "Data-Raw")
dir.create( "Data-Wrangled")
dir.create( "Data-Rodeo")
sublist<-read.csv('/Users/Chris/Documents/OneDrive - University of Illinois - Urbana/Arthur lab stuff/Microbiome_in_SPORE_CC/Data/casecontrol_subjectlist_withlq.csv')
View(sublist)
sublist<-read.csv('/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/Data-Raw/casecontrol_subjectlist_withlq.csv')
main <- "/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/"
setwd( paste0( main, "Data-Raw"))
main <- "/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/"
setwd( paste0( main, "Data-Raw") )
#subset those that have FFQ data available
ffqyes<- s[ s$ffq == 'Y', ]
s<-read.csv( "/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/Data-Raw/casecontrol_subjectlist_withlq.csv" )
sublist<-read.csv('/Users/Chris/Documents/OneDrive - University of Illinois - Urbana/Arthur lab stuff/Microbiome_in_SPORE_CC/Data/casecontrol_subjectlist_withlq.csv')
main <- "/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/"
setwd( paste0( main, "\Data-Raw"))
setwd( paste0( main, "Data-Raw") )
length(unique(ffqyes$id)) #85 unique obs with FFQ data available
#subset those that have FFQ data available
ffqyes<- s[s$ffq=='Y',]
length(unique(ffqyes$id)) #85 unique obs with FFQ data available
main <- "/Volumes/My Passport for Mac/Arthur Lab/Microbiome_in_SPORE_CC/SPORE-Diet-Oral-Microbiome/"
setwd( paste0( main, "Data-Raw") )
s<-read.csv( "casecontrol_subjectlist_withlq.csv" )
#subset those that have FFQ data available
ffqyes <- s[s$ffq=='Y',]
length(unique(ffqyes$id)) #85 unique obs with FFQ data available
merg <-inner_join(ffq.yes,diet.data)
library(readxl)
library(tidyverse)
#subset those that have FFQ data available
ffq.yes <- s[s$ffq=='Y',]
length(unique(ffq.yes$id)) #85 unique obs with FFQ data available
diet.data<-read_xlsx( "combined_1and2_casecontrol_freq.xlsx")
merg <-left_join( ffq.yes, diet.data )
merg
merg <-inner_join( ffq.yes, diet.data )
merg
raw.nutr<-read_xlsx( "casecontrol_raw.nutrients.xlsx" )
raw.nutr<-read_xlsx( "casecontrol_rawnutrients.xlsx" )
merg <- left_join( merg,raw.nutr, by='id' )
# replace "." with NA
merg[ merg=='.' ]<-NA
s[ s=='.' ]<-NA
setwd( paste0( main, "Data-Raw") )
old.data<-read_sas( 'final_merge.sas7bdat')
library(readxl)
library(tidyverse)
library(haven)
setwd( paste0( main, "Data-Raw") )
old.data<-read_sas( 'final_merge.sas7bdat')
# replace "." with NA
old.data[ old.data=='.' ]<-NA
old.data
old.data<-read_sas( 'final_merge.sas7bdat') %>%
rename( idnum = Idnum )
setwd( paste0( main, "Data-Raw") )
old.data<-read_sas( 'final_merge.sas7bdat') %>%
rename( id = Idnum ) #rename id variable to match microbiome dataset
# cases
cases<- s[s$status=='case' & s$ffq=='N',]
nrow(cases)
casesdata<-right_join(old.data[,c('id','CALOR','TFAT')],cases)
casesdata<-casesdata[!is.na(casesdata$CALOR==T),]
old.data[,c('id','CALOR','TFAT')]
cases
casesdata<-left_join(cases, old.data[,c('id','CALOR','TFAT')])
old.data<-read_sas( 'final_merge.sas7bdat') %>%
rename( id = Idnum ) %>%        #rename id variable to match microbiome dataset
mutate( id = as.integer( id ) ) # class type for merging
old.data<-read_sas( 'final_merge.sas7bdat') %>%
rename( id = Idnum ) %>%        #rename id variable to match microbiome dataset
mutate( id = as.integer( id ) ) # class type for merging
old.data<-read_sas( 'final_merge.sas7bdat') %>%
mutate( Idnum = as.integer( Idnum ) ) # class type for merging
old.data<-read_sas( 'final_merge.sas7bdat') %>%
mutate( Idnum = as.integer( Idnum ) ) %>%# class type for merging
rename( id = Idnum )        #rename id variable to match microbiome dataset
old.data<-read_sas( 'final_merge.sas7bdat') %>%
mutate( Idnum = as.numeric( Idnum ) ) %>%  # class type for merging
rename( id = Idnum )                       #rename id variable to match microbiome dataset
old.data<-read_sas( 'final_merge.sas7bdat') %>%
mutate( Idnum = as.numeric( Idnum ) ) # class type for merging
old.data
old.data %>%rename( id = Idnum )                       #rename id variable to match microbiome dataset
old.data %>%rename( id = Idnum )                       #rename id variable to match microbiome dataset
colnames(old.data)[which( colnames( old.data )=='Idnum')] <- "id"              #rename id variable to match microbiome dataset
colnames(old.data)
# cases
cases<- s[s$status=='case' & s$ffq=='N',]
nrow(cases) # 87 cases
casesdata<-left_join(cases, old.data[,c('id','CALOR','TFAT')])
casesdata<-casesdata[!is.na(casesdata$CALOR==T),]
nrow(casesdata)
casesdata[casesdata=='.']<-NA
casesdata
View(casesdata)
casesdata<-left_join(cases, old.data[,c('id','CALOR','TFAT')])
casesdata<-casesdata[!is.na(casesdata$CALOR==T),]
nrow(casesdata) # 64 cases with dietary intake data
casesdata
#merge total cases and controls with FFQ data
finaln<-rbind(casesdata[,c(1,4:15)],merg[,c(1:13)])
merg[ , c( 1:13 ) ]
c( 1,4:15 ) ]
casesdata[ , c( 1,4:15 ) ]
names(casesdata[ , c( 1,4:15 ) ])
names( merg[ , c( 1:13 ) ] )
#merge total cases and controls with FFQ data
finaln<-rbind( casesdata[ , c( 1:14 ) ], merg[ , c( 1:13 ) ] )
names( casesdata[ , c( 1:14 ) ] )
#merge total cases and controls with FFQ data
finaln<-rbind( casesdata[ , c( 1:13 ) ], merg[ , c( 1:13 ) ] )
nrow(finaln)
table(finaln$status) #69 cases, 80 controls
length(unique(finaln$id))
length(unique(finaln$matchid))
#order based on match id
matched <-finaln%>%
arrange( matchid )
matched
unique(matched$matchid)
#remove rows with missing match id
matched2<-matched[!is.na(matched$matchid),]
#127 remaining
matched2$matchid<-as.numeric(matched2$matchid)
matched2
#now remove rows without a match
matched3<-matched2[duplicated(matched2$matchid)==F,]
View(matched3)
#The following gives incorrect result because first occurence is not considered a duplicate
duplicated(matched2$matchid)
#the following gives correct output
duplicated(matched2$matchid) | duplicated(matched2$matchid, fromLast = TRUE)
matched3<-matched2[duplicated(matched2$matchid) | duplicated(matched2$matchid, fromLast = TRUE)==T,]
#finally, drop those without microbiome data
finalset<-matched3[!is.na(matched3$microbiome_timepoint)==T,]
table(finalset$status)# final is 46 cases and 58 controls, n=104
table(matched2$status) #12 controls were dropped and 16 cases were dropped (no matches)
finalset<-finalset%>%
arrange(matchid)
###Write function for table 1 categorical variables
tab1.var.freq<-function(var.name,data,table.var.name,strata.var=NULL,strata.level=NULL){ #var.name is quoted string of how
#variable is stored in dataset, data=is the dataset stored in R environment
#and table.var.name is a character string of how that section of table 1 should be titled
#strata.var is the variable, quoted, to stratify on, and strata.level is a quoted string
#containing the level of strata.var that is to be examined
if(is.null(strata.var)==T){
data2<-data
}
else {
data2<-data[data[[strata.var]]==strata.level,]
}
rowvar.name<-vector()
levelvec<-levels(factor(data[[var.name]]))
for (i in 1:length(levelvec)){
rowvar.name[i]<-paste0(levelvec[i])
}
rowvar.name<-c(table.var.name,rowvar.name)
rowvar.freq<-vector()
for (i in 1:length(levelvec)){
rowvar.freq[i]<-paste0(table(factor(data2[[var.name]]))[i],' (',round(100*table(factor(data2[[var.name]]))[i]/sum(table(factor(data2[[var.name]]))),digits=1),')')
}
rowvar.freq<-c('',rowvar.freq)
rowvar.freq<-ifelse(rowvar.freq=='NA (NA)',paste0('0 (0.0)'),rowvar.freq)
partial.table<-data.frame(cbind(rowvar.name,rowvar.freq))
colnames(partial.table)<-c('Characteristic','Frequency (%) or Mean (SD)')
return(partial.table)
}
####Write table 1 function for continuous variables getting mean and sd
tab1.var.mean<-function(var.name,data,table.var.name,strata.var=NULL,strata.level=NULL){
if(is.null(strata.var)==T){
data<-data
}
else {
data<-data[data[[strata.var]]==strata.level,]
}
rowvar.name<-c(table.var.name)
rowvar.mean<-c(paste0(round(mean(data[[var.name]],na.rm=T),digits=1),' (',round(sd(data[[var.name]]),digits=1),')'))
partial.table<-data.frame(cbind(rowvar.name,rowvar.mean))
colnames(partial.table)<-c('Characteristic','Frequency (%) or Mean (SD)')
return(partial.table)
}
tab1.var.mean(var.name='bmi',data=finalset,table.var.name = 'BMI')
tab1.var.mean(var.name='bmi',data=finalset,table.var.name = 'BMI',
strata.var = 'status',
strata.level='case')
#create bmi variable
finalset$lq_height_feet<-as.numeric(finalset$lq_height_feet)
finalset$lq_height_inches<-as.numeric(finalset$lq_height_inches)
finalset$lq_weight<-as.numeric(finalset$lq_weight)
finalset$bmi<-(finalset$lq_weight*703)/((finalset$lq_height_feet*12+finalset$lq_height_inches)^2)
finalset$lq_age<-as.numeric(finalset$lq_age)
#global
age<-tab1.var.mean(var.name='lq_age',data=finalset,table.var.name = 'Age')
gender<-tab1.var.freq(var.name='lq_gender',data=finalset,table.var.name='Gender')
bmi<-tab1.var.mean(var.name='bmi',data=finalset,table.var.name = 'Body Mass Index')
smokers<-tab1.var.freq(var.name='lq_smoking',data=finalset,table.var.name='Smoking Status')
drinkers<-smokers<-tab1.var.freq(var.name='lq_drinking',data=finalset,table.var.name='Drinking Status')
table1<-rbind(age,gender,bmi,smokers,drinkers)
View(table1)
####Stratified on case status
#Cases
age_case<-tab1.var.mean(var.name='lq_age',data=finalset,table.var.name = 'Age',
strata.var = 'status',
strata.level='case')
gender_case<-tab1.var.freq(var.name='lq_gender',data=finalset,table.var.name='Gender',
strata.var = 'status',
strata.level='case')
bmi_case<-tab1.var.mean(var.name='bmi',data=finalset,table.var.name = 'Body Mass Index',
strata.var = 'status',
strata.level='case')
smokers_case<-tab1.var.freq(var.name='lq_smoking',data=finalset,table.var.name='Smoking Status',
strata.var = 'status',
strata.level='case')
drinkers_case<-smokers<-tab1.var.freq(var.name='lq_drinking',data=finalset,table.var.name='Drinking Status',
strata.var = 'status',
strata.level='case')
table1case<-rbind(age_case,gender_case,bmi_case,smokers_case,drinkers_case)
View(table1case)
#Controls
age_control<-tab1.var.mean(var.name='lq_age',data=finalset,table.var.name = 'Age',
strata.var = 'status',
strata.level='control')
gender_control<-tab1.var.freq(var.name='lq_gender',data=finalset,table.var.name='Gender',
strata.var = 'status',
strata.level='control')
bmi_control<-tab1.var.mean(var.name='bmi',data=finalset,table.var.name = 'Body Mass Index',
strata.var = 'status',
strata.level='control')
smokers_control<-tab1.var.freq(var.name='lq_smoking',data=finalset,table.var.name='Smoking Status',
strata.var = 'status',
strata.level='control')
drinkers_control<-smokers<-tab1.var.freq(var.name='lq_drinking',data=finalset,table.var.name='Drinking Status',
strata.var = 'status',
strata.level='control')
table1control<-rbind(age_control,gender_control,bmi_control,smokers_control,drinkers_control)
finaltable1<-cbind(table1,table1case[,2],table1control[,2])
shiny::runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
shiny::runApp()
