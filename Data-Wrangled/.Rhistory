upper('Identifying POBs and checking data')
toupper('Identifying POBs and checking data')
library( tidyverse )
library( pander )
library( httr )
# update the path with your working directory:
setwd( '/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/R code for now/Data-Wrangled' )
# now, replicating code provided in: https://nonprofit-open-data-collective.github.io/open-1023-ez-dataset/Step-01-ProcessRawData.html
setwd('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/Data-Raw' )
library( tidyverse )
library( pander )
library( httr )
# update the path with your working directory:
setwd( '/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/Data-Wrangled' )
dir()
## Step 1: Identifying POB's in the NPO dataset
# loading data
npo <- readRDS( "NONPROFITS-2014-2021.rds" )
# creating a variable for pob flags
npo$pob <- NA
# Use regex to identify po boxes
x <- grepl( "Post Office|POST OFFICE BOX|PO BOX|POBOX|BOX\\s*\\d|POB\\s*\\d|CPO\\s*\\d|PO B\\s*\\d|^PO\\s*\\d+$", npo$Address, ignore.case=TRUE )
pob <- npo$Address[ which( x )]
head( pob, 5 )
# including a character length var
pob.len <- nchar( pob )
pobs <- tibble( pob, pob.len )
# arranging it
pobs <- arrange( pobs, desc( pob.len ))
head( pobs )
x <- table( pobs$pob.len )
barplot( x )
# Take a look at POBs with 25 characters
head( pobs[ pobs$pob.len==25,], 5 )
# char length
npo$add.len <- nchar( npo$Address )
# pob flag
x <- grepl( "Post Office|POST OFFICE BOX|PO BOX|POBOX|BOX\\s*\\d|POB\\s*\\d|CPO\\s*\\d|PO B\\s*\\d|^PO\\s*\\d+$", npo$Address, ignore.case=TRUE )
npo$pob <- as.numeric( x ) # adding a flag for pobs identified
x <- as.data.frame( prop.table( table( npo$pob )))
names( x ) <- c( "pob", "percent" )
x$percent <- paste0( round( x$percent*100, 1 ), " %" )
table( x )
# We will merge the ADDRESS, CITY, STATE and ZIP variable to
# create an INPUT ADDRESS var in the NPO dataset for geocoding.
# creating an Input Address variable
npo$input_address <- paste( npo$Address, npo$City, npo$State, npo$Zip, sep = ", " )
# loading data
ppl <- readRDS( "PEOPLE-2014-2021.rds" )
# creating a variable for pob flags
ppl$pob <- NA
# regex
x <- grepl( "Post Office|POST OFFICE BOX|PO BOX|POBOX|BOX\\s*\\d|POB\\s*\\d|CPO\\s*\\d|PO B\\s*\\d|^PO\\s*\\d+$", ppl$Address, ignore.case=TRUE )
pob <- ppl$Address[ which( x )]
head( pob, 5 )
# we have po boxes mixed with regular addresses
pob.len <- nchar( pob )
pobs <- tibble( pob, pob.len )
pobs <- arrange( pobs, desc( pob.len ))
head( pobs )
ppl$add.len <- nchar( ppl$Address )
x <- grepl( "Post Office|POST OFFICE BOX|PO BOX|POBOX|BOX\\s*\\d|POB\\s*\\d|CPO\\s*\\d|PO B\\s*\\d|^PO\\s*\\d+$", ppl$Address, ignore.case=TRUE )
ppl$pob <- as.numeric( x ) # adding a flag for pobs identified
x <- as.data.frame( prop.table( table( ppl$pob )))
names( x ) <- c( "pob", "percent" )
x$percent <- paste0( round( x$percent*100, 1 ), " %" )
table( x )
# creating an Input Address variable
ppl$input_address <- paste( ppl$Address, ppl$City, ppl$State, ppl$Zip, sep = ", " ) # creating an input_address field to match the geocode dataframes
nmz <- c( "ID", "ORGNAME", "Address", "City", "State", "Zip", "pob", "add.len" )
add <- npo[ , nmz]
# dropping all pobs
x <- add$pob == 0
add <- add[ x,]
x <- table( add$add.len )
barplot( x )
# Addresses with length 1-2 are unintelligible and will probably have to be geocoded using zip codes or city centers
x <- which( add$add.len %in% c( 1, 2 ))
head( add$Address[ x], 15 )
# Looking at those with length 3-4, they still look unintelligible
x <- which( add$add.len %in% c( 3, 4 ))
head( add$Address[ x], 15 )
# Addresses with length 5-6 also seem to be numbers with not much sense
x <- which( add$add.len %in% c( 5, 6 ))
head( add$Address[ x], 15 )
# However, looking at those with length 7-8, we start to recognize proper addressess.
x <- which( add$add.len %in% c( 7, 8 ))
head( add$Address[ x], 15 )
# City var has some unintelligible values
x <- as.data.frame( table( add$City, useNA = "always" ))
names( x )[ 1] <- "City"
x <- arrange( x, City )
x$City[ 1:50]
head( add$Address[ x], 15 )
# And some values that seem to be too short or too long
x$City <- as.character( x$City )
x$len <- nchar( x$City )
barplot( table( x$len ))
x <- arrange( x, len )
head( x$City, 20 )
tail( x$City, 15 )
sort( unique( add$State ))
## Step 4: Exploring Address Data Gaps in Board Member dataset
nmz <- c( "ID", "ORGNAME", "Address", "City", "State", "Zip", "pob", "add.len" )
add <- ppl[ , nmz]
# dropping all pobs
x <- add$pob == 0
add <- add[ x,]
x <- table( add$add.len )
barplot( x )
# Similar to NPO data, shorter addresses are unintelligeble.
x <- which( add$add.len %in% c( 1, 2 ))
head( add$Address[ x], 15 )
x <- which( add$add.len %in% c( 3, 4 ))
head( add$Address[ x], 15 )
x <- which( add$add.len %in% c( 5, 6 ))
head( add$Address[ x], 15 )
# And, again, Addresses with length 7-8 are recognizable as proper addressess.
x <- which( add$add.len %in% c( 7, 8 ))
head( add$Address[ x], 20 )
# City var has some unintelligible values
x <- as.data.frame( table( add$City, useNA = "always" ))
names( x )[ 1] <- "City"
x <- arrange( x, City )
x$City[ 1:50]
# And some values that seem to be too short or too long
x$City <- as.character( x$City )
x$len <- nchar( x$City )
barplot( table( x$len ))
x <- arrange( x, len )
head( x$City, 20 )
tail( x$City, 15 )
sort( unique( add$State ))
## Part 5a: Creating a NPO input_address dataset
npo <- readRDS( "NONPROFITS-2014-2021v2.rds" )
npo$input_address <- paste( npo$Address, npo$City, npo$State, npo$Zip, sep = ", " ) # creating an input_address field to match the geocode dataframes
npo <- npo[ , c( 1, 73, 12:15, 71 )]
npo$ID <- 0
npo <- unique( npo )
npo <- npo[ order( npo$input_address ),]
npo$ID <- 1:nrow( npo )
npo[ [ 'id' ] ]
npo[[ 'id' ]]
npo[[ 'ID' ]]
npo[ [ 'ID' ] ]
