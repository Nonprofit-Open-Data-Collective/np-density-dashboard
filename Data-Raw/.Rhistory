top      <- quantile( dar, top.p, na.rm=T )
bottom   <- quantile( dar, bottom.p, na.rm=T )
dar.w    <- dar
dar.w[ dar.w > top    ] <- top
dar.w[ dar.w < bottom ] <- bottom
dar.z <- scale( dar.w )
dar.p <- dplyr::ntile( dar, 100 )
DAR <- data.frame( dar, dar.w, dar.z, dar.p )
print( summary( DAR ) )
par( mfrow=c(2,2) )
plot( density(dar,   na.rm=T), main="Debt to Asset Ratio (DAR)" )
plot( density(dar.w, na.rm=T), main="DAR Winsorized" )
plot( density(dar.z, na.rm=T), main="DAR Standardized as Z" )
plot( density(dar.p, na.rm=T), main="DAR as Percentile" )
df.dar <- data.frame( cbind( df, DAR ) )
return( df.dar )
}
get_dar(df=part010810)
#'
#' # numerator not specified
#' d <- get_dar( df = dat, debt = NULL, assets = "x2")
#'
#' # denominator not specified
#' d <- get_dar( df = dat, debt = "x1", assets = NULL )
#'
#' # neither numerator nor denominator specified
#' d <- get_dar( df = dat, debt = NULL, assets = NULL )
#' @export
get_dar <- function( df,
debt = c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") ,
assets = c("F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY"),
winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( debt )==T & is.null( assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==F & is.null( assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==T & is.null( assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
# copy data
dat <- df
## ensure variable classes are numeric ##
#check
num.numeric <- sum( sapply( dat[debt], function(x) is.numeric(x) ) )
den.numeric <- sum( sapply( dat[assets], function(x) is.numeric(x) ) )
# coerce
if(  num.numeric < length( debt ) ){
warning(paste0("At least one of the provided numerator variables was not of object class numeric. ", length( debt )-num.numeric, " variables were (was) coerced to numeric." ) )
dat[ debt ] <- data.frame( sapply( df[ debt ], function(x) as.numeric( as.character (x) ) ) )
}
if(  den.numeric < length( assets ) ){
warning(paste0("At least one of the provided denominator variables was not of object class numeric. ", length( assets )-den.numeric, " variables were (was) coerced to numeric." ) )
dat[ assets ] <- data.frame( sapply( df[ assets ], function(x) as.numeric( as.character (x) ) ) )
}
# check to ensure both sets of variable names are included in input data when not specifying column names.
# edge cases
# BEGIN first outer conditional
# BEGIN first outer conditional
if ( sum( debt %in% c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") )==2 & sum( assets %in% c( "F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY") )==2 ) {
# BEGIN series of nested conditionals
# if at least one of the columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% debt ) )==1 | length( which( colnames( dat ) %in% assets ) )==1 ) {
if ( length( which(colnames( dat ) %in% debt ) )==2 ){
# create a column that concatenates two numerator variables into single column if both columns for numerator are present
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- as.numeric( as.character( dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ] ) )
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- as.numeric( as.character( dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ] ) )
}
# if at least one of the numerator columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% debt ) )==1 ){
this <- which( colnames( dat ) %in% debt )
dat[ , "d"] <- dat[ , this ]
}
if ( length( which( colnames( dat ) %in% assets ) )==2 ){
# create a column that concatenates two numerator variables into single column if both columns for denominator are present
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- as.numeric( as.character( dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ] ) )
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- as.numeric( as.character( dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ] ) )
}
# if at least one of the denominator columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% assets ))==1  ){
this <- which( colnames( dat ) %in% assets )
dat[ , "a"] <- dat[ , this ]
}
# END series of nested conditionals
# now, assign p and e, respectively
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
# if all four columns are present, exit conditional
if ( length( debt )==2 & length( assets )==2 & length(which( colnames( dat ) %in% debt ) )==2 & length(which( colnames( dat ) %in% assets ) )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
}
# END first outer conditional
# all other cases are nested in the following conditionals
if ( sum( debt %in% c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") )!=2 & sum( assets %in% c( "F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY") )!=2 ){
if ( length( debt )==2 & length( assets )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
else if ( length( debt )==2 & length( assets )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
d <- dat[[ "d"]]
a <- dat[[ assets ]]
}
else if ( length( debt )==1 & length( assets )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ debt ]]
a <- dat[[ "a"]]
}
else if ( length( debt )==1 & length( assets )==1 ) {
d <- dat[[ debt ]]
a <- dat[[ assets ]]
}
}
# can't divide by zero
print( paste0( "Assets cannot be equal to zero: ", sum( a==0 , na.rm=T), " cases have been replaced with NA." ) )
a[ a == 0 ] <- NA
dar <- d / a
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dar, top.p, na.rm=T )
bottom   <- quantile( dar, bottom.p, na.rm=T )
dar.w    <- dar
dar.w[ dar.w > top    ] <- top
dar.w[ dar.w < bottom ] <- bottom
dar.z <- scale( dar.w )
dar.p <- dplyr::ntile( dar, 100 )
DAR <- data.frame( dar, dar.w, dar.z, dar.p )
print( summary( DAR ) )
par( mfrow=c(2,2) )
plot( density(dar,   na.rm=T), main="Debt to Asset Ratio (DAR)" )
plot( density(dar.w, na.rm=T), main="DAR Winsorized" )
plot( density(dar.z, na.rm=T), main="DAR Standardized as Z" )
plot( density(dar.p, na.rm=T), main="DAR as Percentile" )
df.dar <- data.frame( cbind( df, DAR ) )
return( df.dar )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_dar( df = dat, debt = "x1", assets = "x2" )
head( d )
# run with default column names
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY",
"F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_01 )
d <- get_dar( dat_01, debt = "F9_10_LIAB_TOT_EOY", assets = "F9_01_NAFB_ASSET_TOT_EOY" )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_dar( df = dat, debt = "x1", assets ="x2", winsorize=0.95 )
d <- get_dar( dat_01, winsorize = 0.95 )
# assume only one PC variable for the numerator or denominator is present in the dataset and we run with default parameters
dat_02 <- dat_01
colnames( dat_02 ) <- c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY",
"x", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_02, winsorize = 0.95 )
#check
this.n <- which( colnames( dat ) %in% debt )
this.n
colnames( dat )
debt
#'
#' # numerator not specified
#' d <- get_dar( df = dat, debt = NULL, assets = "x2")
#'
#' # denominator not specified
#' d <- get_dar( df = dat, debt = "x1", assets = NULL )
#'
#' # neither numerator nor denominator specified
#' d <- get_dar( df = dat, debt = NULL, assets = NULL )
#' @export
get_dar <- function( df,
debt = c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") ,
assets = c("F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY"),
winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( debt )==T & is.null( assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==F & is.null( assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==T & is.null( assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
# copy data
dat <- df
## ensure variable classes are numeric ##
#check
this.n <- which( colnames( dat ) %in% debt )
this.d <- which( colnames( dat ) %in% assets )
num.numeric <- sum( sapply( dat[this.n], function(x) is.numeric(x) ) )
den.numeric <- sum( sapply( dat[this.d], function(x) is.numeric(x) ) )
# coerce
if(  num.numeric < length( this.n ) ){
warning(paste0("At least one of the provided numerator variables was not of object class numeric. ", length( this.n )-num.numeric, " variables were (was) coerced to numeric." ) )
dat[ debt ] <- data.frame( sapply( df[ debt ], function(x) as.numeric( as.character (x) ) ) )
}
if(  den.numeric < length( this.d ) ){
warning(paste0("At least one of the provided denominator variables was not of object class numeric. ", length( this.d )-den.numeric, " variables were (was) coerced to numeric." ) )
dat[ assets ] <- data.frame( sapply( df[ assets ], function(x) as.numeric( as.character (x) ) ) )
}
# check to ensure both sets of variable names are included in input data when not specifying column names.
# edge cases
# BEGIN first outer conditional
# BEGIN first outer conditional
if ( sum( debt %in% c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") )==2 & sum( assets %in% c( "F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY") )==2 ) {
# BEGIN series of nested conditionals
# if at least one of the columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% debt ) )==1 | length( which( colnames( dat ) %in% assets ) )==1 ) {
if ( length( which(colnames( dat ) %in% debt ) )==2 ){
# create a column that concatenates two numerator variables into single column if both columns for numerator are present
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- as.numeric( as.character( dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ] ) )
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- as.numeric( as.character( dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ] ) )
}
# if at least one of the numerator columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% debt ) )==1 ){
this <- which( colnames( dat ) %in% debt )
dat[ , "d"] <- dat[ , this ]
}
if ( length( which( colnames( dat ) %in% assets ) )==2 ){
# create a column that concatenates two numerator variables into single column if both columns for denominator are present
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- as.numeric( as.character( dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ] ) )
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- as.numeric( as.character( dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ] ) )
}
# if at least one of the denominator columns in missing from the input dataset, use only the column that is present
if ( length( which( colnames( dat ) %in% assets ))==1  ){
this <- which( colnames( dat ) %in% assets )
dat[ , "a"] <- dat[ , this ]
}
# END series of nested conditionals
# now, assign p and e, respectively
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
# if all four columns are present, exit conditional
if ( length( debt )==2 & length( assets )==2 & length(which( colnames( dat ) %in% debt ) )==2 & length(which( colnames( dat ) %in% assets ) )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
}
# END first outer conditional
# all other cases are nested in the following conditionals
if ( sum( debt %in% c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY") )!=2 & sum( assets %in% c( "F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY") )!=2 ){
if ( length( debt )==2 & length( assets )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ "d"]]
a <- dat[[ "a"]]
}
else if ( length( debt )==2 & length( assets )==1 ) {
# create a column that concatenates two denominator variables into single column
dat[ which( is.na( dat[ debt[2] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[2] ] )==F ), debt[2] ]
dat[ which( is.na( dat[ debt[1] ] )==F ), "d"] <- dat[ which( is.na( dat[ debt[1] ] )==F ), debt[1] ]
d <- dat[[ "d"]]
a <- dat[[ assets ]]
}
else if ( length( debt )==1 & length( assets )==2 ) {
# create a column that concatenates two numerator variables into single column
dat[ which( is.na( dat[ assets[2] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[2] ] )==F ), assets[2] ]
dat[ which( is.na( dat[ assets[1] ] )==F ), "a"] <- dat[ which( is.na( dat[ assets[1] ] )==F ), assets[1] ]
d <- dat[[ debt ]]
a <- dat[[ "a"]]
}
else if ( length( debt )==1 & length( assets )==1 ) {
d <- dat[[ debt ]]
a <- dat[[ assets ]]
}
}
# can't divide by zero
print( paste0( "Assets cannot be equal to zero: ", sum( a==0 , na.rm=T), " cases have been replaced with NA." ) )
a[ a == 0 ] <- NA
dar <- d / a
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dar, top.p, na.rm=T )
bottom   <- quantile( dar, bottom.p, na.rm=T )
dar.w    <- dar
dar.w[ dar.w > top    ] <- top
dar.w[ dar.w < bottom ] <- bottom
dar.z <- scale( dar.w )
dar.p <- dplyr::ntile( dar, 100 )
DAR <- data.frame( dar, dar.w, dar.z, dar.p )
print( summary( DAR ) )
par( mfrow=c(2,2) )
plot( density(dar,   na.rm=T), main="Debt to Asset Ratio (DAR)" )
plot( density(dar.w, na.rm=T), main="DAR Winsorized" )
plot( density(dar.z, na.rm=T), main="DAR Standardized as Z" )
plot( density(dar.p, na.rm=T), main="DAR as Percentile" )
df.dar <- data.frame( cbind( df, DAR ) )
return( df.dar )
}
d <- get_dar( dat_02, winsorize = 0.95 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_dar( df = dat, debt = "x1", assets = "x2" )
head( d )
# run with default column names
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY",
"F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_01 )
d <- get_dar( dat_01, debt = "F9_10_LIAB_TOT_EOY", assets = "F9_01_NAFB_ASSET_TOT_EOY" )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_dar( df = dat, debt = "x1", assets ="x2", winsorize=0.95 )
d <- get_dar( dat_01, winsorize = 0.95 )
# assume only one PC variable for the numerator or denominator is present in the dataset and we run with default parameters
dat_02 <- dat_01
colnames( dat_02 ) <- c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY",
"x", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_02, winsorize = 0.95 )
colnames( dat_02 ) <- c( "F9_10_LIAB_TOT_EOY", "x",
"F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_02, winsorize = 0.95 )
get_dar(df=part010810)
d<- get_dar(df=part010810)
part010810$F9_01_NAFB_ASSET_TOT_EOY <- as.character( part010810$F9_01_NAFB_ASSET_TOT_EOY )
d <- get_dar(df=part010810)
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_dar( df = dat, debt = "x1", assets = "x2" )
head( d )
# run with default column names
x3 <- rnorm( 1000,100,30 )
x4 <- rnorm( 1000,200,30 )
x3[ seq( from = 1, to = 1000, 50 ) ] <- NA
x4[ seq( from = 1, to = 1000, 71 ) ] <- NA
dat_01 <- data.frame( x1, x2, x3, x4 )
colnames( dat_01 ) <- c( "F9_10_LIAB_TOT_EOY", "F9_01_NAFB_LIAB_TOT_EOY",
"F9_10_ASSET_TOT_EOY", "F9_01_NAFB_ASSET_TOT_EOY")
d <- get_dar( dat_01 )
d <- get_dar( dat_01, debt = "F9_10_LIAB_TOT_EOY", assets = "F9_01_NAFB_ASSET_TOT_EOY" )
# specify only
d <- get_dar( dat_01, debt = "F9_10_LIAB_TOT_EOY", assets = "F9_10_ASSET_TOT_EOY" )
# specify only PC variables
d <- get_dar( dat_01, debt = "F9_10_LIAB_TOT_EOY", assets = "F9_10_ASSET_TOT_EOY" )
# coerce one column to factor
dat_01$F9_10_LIAB_TOT_EOY <- as.factor( dat_01$F9_10_LIAB_TOT_EOY )
d <- get_dar( dat_01 )
save(part010810, file='/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Fiscal/fiscal/R/sysdata.rda')
levels(as.factor(npo[,3]))
length(c( 'ProcessedMts', 'Meat', 'Poultry', 'Fish_Hi', 'Fish_Lo',
'Eggs', 'SolidFats', 'Oils', 'Milk', 'Yogurt', 'Cheese',
'Alcohol', 'FruitOther', 'F_CitMelBer', 'Tomatoes',
'GreenLeafy',
'DarkYlVeg', 'OtherVeg',
'Potatoes', 'OtherStarchyVeg',
'Legumes', 'Soy', 'RefinedGrain', 'WholeGrain', 'Nuts',
'AddedSugars' ))
library( tidyverse )
library( rio )  # to import xlsx files
library( gender )  # for estimating gender from data ( first names )
url <- c( 'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2014.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2015.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2016.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023EZ_approvals_2017.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2018.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2019.xlsx') )
url <- c( 'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2014.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2015.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2016.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023EZ_approvals_2017.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2018.xlsx',
'https://www.irs.gov/pub/irs-tege/f1023ez_approvals_2019.xlsx')
# import data using lapply and store in list
df <- lapply( url, function( x )  rio::import( file = x ) )
# assign elements of list as individual dataframes, names dd1:dd8
for ( i in 1:length ( url ) ) {
dds <- paste0( 'dd', 1:length ( url ) )
assign( dds[ i ], df( [ i ] ) )
}
# assign elements of list as individual dataframes, names dd1:dd8
for ( i in 1:length ( url ) ) {
dds <- paste0( 'dd', 1:length ( url ) )
assign( dds[i], df( [i] ) )
}
# assign elements of list as individual dataframes, names dd1:dd8
for ( i in 1:length ( url ) ) {
dds <- paste0( 'dd', 1:length ( url ) )
assign( dds[i], df[i]  )
}
# Change column names for 2018-2021
# For binding with the data of previous years, the name of one of the duplicated columns will be set
# back to its original name ( removing the column # ). We will leave the duplicated variables present in
# 2018 and 2019 data and will rename them with a “.1” at the end.
colnames( dd5 ) [ 91 ] <- "Gamingactyno"
colnames( dd5 ) [ 92 ] <- "Gamingactyyes"
setwd( '/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/Data-Raw' )
dd1 <- readRDS( 'f1023ez_approvals_2014.rds' )
dd2 <- readRDS( 'f1023ez_approvals_2015.rds' )
dd3 <- readRDS( 'f1023ez_approvals_2016.rds' )
dd4 <- readRDS( 'f1023ez_approvals_2017.rds' )
dd5 <- readRDS( 'f1023ez_approvals_2018.rds' )
dd6 <- readRDS( 'f1023ez_approvals_2019.rds' )
# Change column names for 2018-2021
# For binding with the data of previous years, the name of one of the duplicated columns will be set
# back to its original name ( removing the column # ). We will leave the duplicated variables present in
# 2018 and 2019 data and will rename them with a “.1” at the end.
colnames( dd5 ) [ 91 ] <- "Gamingactyno"
colnames( dd5 ) [ 92 ] <- "Gamingactyyes"
colnames( dd5 ) [ 103 ] <- "Gamingactyno.1"
colnames( dd5 ) [ 104 ] <- "Gamingactyyes.1"
colnames( dd6 ) [ 91 ] <- "Gamingactyno"
colnames( dd6 ) [ 92 ] <- "Gamingactyyes"
colnames( dd6 ) [ 103 ] <- "Gamingactyno.1"
colnames( dd6 ) [ 104 ] <- "Gamingactyyes.1"
# final row bind
dat <- bind_rows( dd1, dd2, dd3, dd4, dd5, dd6)
nrow(dat)
# check for missings in EIN and case number
sum( is.na( dat$EIN ) )
sum( is.na( dat$`Case Number` ) )
# Current dataset has two variables for ORGNAME and they seem to be a single name split into the two vars.
head( dat[ , c( "Orgname1", "Orgname2" ) ], 5 )
x <- dat[ , c( "Orgname1", "Orgname2" ) ] # subsetting only orgnames to compare
x <- x[ !is.na( x$Orgname2 ) , ] # removing NAs from Orgname2
x$Org2len <- nchar( as.character( x$Orgname2 ) )
x <- x[ order( x$Org2len, decreasing = T ) , ]
head( x, 10 )
# Merging Orgname 1 and 2 to create variable ORGNAME
dat$ORGNAME <- dat$Orgname1
x <- is.na( dat$Orgname2 )
x <- dat[ !x, c( "Orgname1", "Orgname2" ) ]
x[ 1:10, ]
x <- is.na( dat$Orgname2 )
dat$ORGNAME[ !x ] <- paste0( dat$ORGNAME[ !x ], dat$Orgname2[ !x ] )
x <- dat[ !x, "ORGNAME" ]
x[ 1:10, ]
colnames( dat ) [ 2 ] <- "Case.Number"
dat <- unique( dat )
dat <- as_tibble( dat )
nrow(dat)
dd7 <- readRDS( 'f1023ez_approvals_2020.rds' )
dd8 <- readRDS( 'f1023ez_approvals_2021.rds' )
colnames( dd7 ) [ 91 ] <- "Gamingactyno"
colnames( dd7 ) [ 92 ] <- "Gamingactyyes"
colnames( dd7 ) [ 103 ] <- "Gamingactyno.1"
colnames( dd7 ) [ 104 ] <- "Gamingactyyes.1"
colnames( dd8 ) [ 91 ] <- "Gamingactyno"
colnames( dd8 ) [ 92 ] <- "Gamingactyyes"
colnames( dd8 ) [ 103 ] <- "Gamingactyno.1"
colnames( dd8 ) [ 104 ] <- "Gamingactyyes.1"
# final row bind
dat <- bind_rows( dd1, dd2, dd3, dd4, dd5, dd6, dd7, dd8 )
# check for missings in EIN and case number
sum( is.na( dat$EIN ) )
sum( is.na( dat$`Case Number` ) )
# Current dataset has two variables for ORGNAME and they seem to be a single name split into the two vars.
head( dat[ , c( "Orgname1", "Orgname2" ) ], 5 )
x <- dat[ , c( "Orgname1", "Orgname2" ) ] # subsetting only orgnames to compare
x <- x[ !is.na( x$Orgname2 ) , ] # removing NAs from Orgname2
x$Org2len <- nchar( as.character( x$Orgname2 ) )
x <- x[ order( x$Org2len, decreasing = T ) , ]
head( x, 10 )
# Merging Orgname 1 and 2 to create variable ORGNAME
dat$ORGNAME <- dat$Orgname1
x <- is.na( dat$Orgname2 )
x <- dat[ !x, c( "Orgname1", "Orgname2" ) ]
x[ 1:10, ]
x <- is.na( dat$Orgname2 )
dat$ORGNAME[ !x ] <- paste0( dat$ORGNAME[ !x ], dat$Orgname2[ !x ] )
x <- dat[ !x, "ORGNAME" ]
x[ 1:10, ]
colnames( dat ) [ 2 ] <- "Case.Number"
dat <- unique( dat )
dat <- as_tibble( dat )
