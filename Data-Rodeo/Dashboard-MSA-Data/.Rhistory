library( tidyverse )
library( urbnmapr )         # state/county shapefiles
library( sf )               # simple features framework
library( tigris )           # TIGER shapefiles
library( tidycensus )       # Census data queries
library( cartogram )        # Create sf objects for Dorling Cartograms
options( tigris_class = "sf" )
options( tigris_use_cache = TRUE )
source('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/helpers.R')
lf <- "/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/Large-Files-Bank"
setwd( lf )
# data containing NPO coordinates as points
npo <- readRDS( 'NONPROFITS-2014-2021v7.rds' )
# convert lat/long to a sf
npo.sf <- npo %>%
filter( is.na( lat ) == F ) %>% # st_as_sf does not allow missing values in coordinate columns; n = 167 missing
st_as_sf( coords = c( "lon", "lat" ), crs = 3395 ) # change projection accordingly
# pull tract-level shapefiles from `tigris`
t <- tracts( cb = TRUE ) # USA Census tract shapefiles
t <- st_transform( t, crs = 3395 ) # project onto compatible crs
setwd( lf )
setwd( "../np-density-dashboard/Data-Wrangled")
d.1 <- do.call( "rbind", l ) %>% mutate( year = as.character( year ) ) # dataframe containing a column for tract GEOID and columns for its yearly census data
setwd( "01-Temp" )
d.1 <- readRDS( "01-MSA-Census.rds" )
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, c( 2014:2021) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "cum" )
b <- list()
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, c( 2014:2021) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "cum" )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year == ys.np.nm[i] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year = YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
# bind into single dataset and merge yearly NPO data to yearly census data
d.2 <- do.call( "rbind", b )
d.2$year
# save for later use
setwd( lf )
setwd( "../np-density-dashboard/Data-Wrangled/01-Temp")
levels(as.factor(d.2$year))
levels(as.factor(npo$YR))
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, c( 2014:2021) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "cum" )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year == ys.np.nm[i] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year = YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, c( 2014:2021) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "cum" )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year == ys.np.nm[i] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year = YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
# bind into single dataset and merge yearly NPO data to yearly census data
d.2 <- do.call( "rbind", b )
levels(as.factor(d.2$year))
i=8
npo.sf %>%
filter( YR %in% ys.np[[i]] )
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, c( 2014:2021 ) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2020", "cum" )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year == ys.np.nm[i] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year, YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
# bind into single dataset and merge yearly NPO data to yearly census data
d.2 <- do.call( "rbind", b )
levels(as.factor(d.2$year))
levels(as.factor(d.2$yr))
levels(as.factor(d.2$YR))
# Import counties landing page map
main <- "/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/"
setwd( paste0( main, "np-density-dashboard/Data-Rodeo/Dashboard-County-Data/" ) )
##  County Standard Projection Shapefile
cnties <- readRDS( "USA-Counties.rds" )
levels(as.factor(cnties$year))
d.1$year
as.character(2014:2021)
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, c( 2014:2021 ) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2020", "cum" )
ys.np.cen <- list( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2020", as.character(2014:2020) )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year %in% ys.np.cen[[i]] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year, YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
i=9
dat.yr <- filter( d.1, year %in% ys.np.cen[[i]] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year, YR, dens )
b[[9]]
ys.np <- list( 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, c( 2014:2021 ) )       # we will index on the years we will subset
ys.np.nm <- c( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2020", "cum" )
ys.np.cen <- list( "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2020", "2020" )
b <- list()
for ( i in 1: length( ys.np ) ){
start.time <- Sys.time()
dat.yr <- filter( d.1, year %in% ys.np.cen[[i]] )   # subset data by year
b[[i]] <- npo.sf %>%
filter( YR %in% ys.np[[i]] ) %>%                # group by tract FIPS for subsequent computation
left_join( dat.yr, .) %>%                       # join with Census population data
group_by( GEOID ) %>%
mutate( n = ifelse( is.na( n() ) ==T, 0, n( ) ) ) %>%          # count number of rows per tract FIPS since rows are the nonprofits
ungroup() %>%
mutate( n = ifelse( is.na( n ), 0, n ),                # tracts that have an NA (i.e., tracts not represented in the NCCS data) get allocated 0 new NPOs
dens = ( n / pop ) * 1000 ,                    # create NPO density metric (NPOs per 1k in the population)
dens = ifelse( is.na( dens ), 0, dens ),
year = ys.np.nm[i] ) %>%  # those still having a "NA" for the density metric are tracts that have 0 population and 0 number of nonprofits (n = 763 instances of 0/0)
distinct( GEOID, pop, poverty.rate, med.income,
perc.female, perc.male, n, year, YR, dens )                # keep unique rows (i.e., 1 for each tract)
# this dataset should have same number of rows as d.1 (all census tracts) and no missings
# in any of the columns
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( ys.np ), " complete" ) )
}
# bind into single dataset and merge yearly NPO data to yearly census data
d.2 <- do.call( "rbind", b )
# since we use 2020 census data for the 2021 NPOs, we need to fix the discrepancy in the year variables
d.2 %>%
mutate( year = ifelse( year == "2020" & YR == "2021", "2021", year ) ) %>%
select( -YR )
# since we use 2020 census data for the 2021 NPOs, we need to fix the discrepancy in the year variables
d.2 <- d.2 %>%
mutate( year = ifelse( year == "2020" & YR == "2021", "2021", year ) ) %>%
select( -YR )
levels(as.factor(d.2$year))
# save for later use
setwd( lf )
setwd( "../np-density-dashboard/Data-Wrangled/01-Temp")
saveRDS( d.2, "02-MSA-NPO.rds" )
shiny::runApp('/Volumes/My Passport for Mac/Urban Institute/Summer Projects/Geospatial Dashboard/np-density-dashboard/R/Nonprofit-Density')
setwd( paste0( main, "np-density-dashboard/Data-Rodeo/Dashboard-MSA-Data/" ) )
msas <- readRDS( "USA-MSAs.rds" )
setwd( paste0( main, "np-density-dashboard/Data-Rodeo/Dashboard-MSA-Data/" ) )
msas <- readRDS( "USA-MSAs.rds" )
d.4
d.3
