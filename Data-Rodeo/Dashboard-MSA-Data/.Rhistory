sj %>%
filter( MSA %in% keep.msa.1m$MSA )
keep.msa.1m <- sj %>%
group_by( MSA ) %>%
mutate( sum.pop = sum( pop )) %>%
ungroup() %>%
filter( sum.pop > 1500000 ) %>%
distinct( MSA )
keep.msa.1m
keep.msa.1.5m <- sj %>%
group_by( MSA ) %>%
mutate( sum.pop = sum( pop )) %>%
ungroup() %>%
filter( sum.pop > 1500000 ) %>%
distinct( MSA )
sj %>%
filter( MSA %in% keep.msa.1.5m$MSA )
d.3 <- sj %>%
filter( MSA %in% keep.msa.1.5m$MSA )
msas <- unique( d.3$MSA )
msas
str_extract( msas, "[:alpha:]")
str_extract( msas, "[:alpha:]{4")
str_extract( msas, "[:alpha:]{4}")
# text process them a bit to make them easier to store
# first, extract everything before the comma (subsequently leading to the state)
str_extract( msas, "^.*(?=(\,))")
# text process them a bit to make them easier to store
# first, extract everything before the comma (subsequently leading to the state)
str_extract( msas, "^.*(?=(\\,))")
# text process them a bit to make them easier to store
# first, extract everything before the comma (subsequently leading to the state)
str_extract( msas, "^.*(?=(\\,))") %>%
str_replace(., "\\s","-")
msas <- unique( d.3$MSA ) # dataset names will be according to MSA names
# text process them a bit to make them easier to store
msas %>%
str_extract( ., "^.*(?=(\\,))") %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace(., "\\s","-")            # replace white space with a "-"
msas <- unique( d.3$MSA ) # dataset names will be according to MSA names
# text process them a bit to make them easier to store
msa.file <- msas %>%
str_extract( ., "^.*(?=(\\,))") %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace(., "\\s","-")            # replace white space with a "-"
msa.file
msas <- unique( d.3$MSA ) # dataset names will be according to MSA names
# text process them a bit to make them easier to store
msa.file <- msas %>%
str_extract( ., "^.*(?=(\\,))" ) %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace( ., "\\s","-" )%>%        # replace white space with a "-"
str_remove( ., "\\." )                # remove any "." from the strings
msa.file
getwd
getwd()
setwd("..\")
setwd("..")
getwd()
setwd(lf)
setwd("../Data-Rodeo")
setwd("../np-density-dashboard/Data-Rodeo")
getwd()
dir.create("Dashboard-MSA-Data")
#dir.create("Dashboard-MSA-Data")
setwd("/Dashboard-MSA-Data")
getwd()
#dir.create("Dashboard-MSA-Data")
dir()
setwd("Dashboard-MSA-Data")
# create LOG file/metadata
log <- c( "Query_Number", "Start_time", "Time_taken" )
log <- paste( log, collapse = ', ' )
log
?write
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Logged.Time" )
# dir.create("Dashboard-MSA-Data")
# dir()
setwd("Dashboard-MSA-Data")
getwd()
write( log.head, file = "MSA-Data-Log.txt", append = F )
i=1
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
MSA
nrow( dat )
sum( dat$pop )
dat$n
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F )
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
saveRDS( dat , paste0( msa.file, "-MSA.rds"))
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = ', ' ) # comma-delimiter
write( log, file = "MSA-Data-Log.txt", append = T )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F )
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
saveRDS( dat , paste0( msa.file, "-MSA.rds"))
end.time <- Sys.time()
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
paste0( msa.file, "-MSA.rds")
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F )
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
saveRDS( dat , paste0( msa.file[i], "-MSA.rds"))
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = ', ' ) # comma-delimiter
write( log, file = "MSA-Data-Log.txt", append = T )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
dir()
dir()[4]
readRDS(dir()[4])
msa.file
# text process them a bit to make them easier to store
msa.file <- msas %>%
str_extract( ., "^.*(?=(\\,))" ) %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace( ., "\\s", "-" )%>%        # replace white space with a "-"
str_remove( ., "\\." )                # remove any "." from the strings
msa.file
# text process them a bit to make them easier to store
msa.file <- msas %>%
str_extract( ., "^.*(?=(\\,))" ) %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace( ., "\\s", "-" )%>%        # replace white space with a "-"
str_remove( ., "\\." ) %>%             # remove any "." from the strings
str_replace( ., "\\s", "-" )
msa.file
msas <- unique( d.3$MSA ) # dataset names will be according to MSA names
# text process them a bit to make them easier to store
msa.file <- msas %>%
str_extract( ., "^.*(?=(\\,))" ) %>% # first, extract everything before the comma (subsequently leading to the state)
str_replace( ., "\\s", "-" )%>%        # replace white space with a "-"
str_remove( ., "\\." ) %>%             # remove any "." from the strings
str_replace( ., "\\s", "-" ) # run again because we still have some white spaces that have not been replaced
msa.file
setwd("../np-density-dashboard/Data-Rodeo")
getwd()
?write
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
getwd()
dir.create( "Dorling-Datasets")
setwd( "Dorling-Datasets" )
msa.file
msa.file
setwd( "Dorling-Datasets")
getwd()
setwd( .. )
setwd( ".." )
getwd()
setwd("../np-density-dashboard/Data-Rodeo")
# dir.create("Dashboard-MSA-Data")
# dir()
setwd("Dashboard-MSA-Data")
getwd()
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
dir.create( "Dorling-Datasets")
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
# dir.create("Dashboard-MSA-Data")
# dir()
setwd("Dashboard-MSA-Data")
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
# dir.create("Dashboard-MSA-Data")
# dir()
setwd("Dashboard-MSA-Data")
getwd()
setwd("..")
getwd
getwd()
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
library(cartogram)
getwd()
setwd".."
setwd("..")
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
getwd()
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
st_crs(d.3[ which( d.3$MSA == msas[i] ), ])
d.3 <- st_transform( d.3, crs=3395)
setwd('..')
getwd()
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save
setwd( "Dorling-Datasets" ) # save sf projected for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
msas[i]
# do a spatial intersection to ensure Census tracts touching but outside the boundaries are excluded
sub.area <- filter( m, grepl( msas[i], NAME ) )
sub.area
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
s <- st_within( dat, sub.area ) # spatial overlay
st_crs(m)
m <- st_transform( m, crs = 3395 )
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# do a spatial intersection to ensure Census tracts touching but outside the boundaries are excluded
sub.area <- filter( m, grepl( msas[i], NAME ) )
s <- st_within( dat, sub.area ) # spatial overlay
s
nrow(dat)
these <- map_lgl( s, function( x ) {
if ( length( x ) == 1 ) {
return( TRUE )
} else {
return( FALSE )
}
} )
# final subset
dat <- dat[ these, ]
nrow(dat)
nrow(d.3)
getwd
getwd()
setwd('..')
getwd()
# create LOG file/metadata
log.head <- c( "Iteration", "MSA", "No.Tracts", "Pop", "No.NPO"," Save.Time" )
write( log.head, file = "MSA-Data-Log.txt", append = F, sep = "\t" )
d.3 <- st_transform( d.3, crs = 3395 ) # ensure data are in compatible projection before using cartogram fct
nrow(d.3)
# loop
for ( i in 1:length( msa.file ) ) {
start.time <- Sys.time()
# subset by MSA
dat <- d.3[ which( d.3$MSA == msas[i] ), ]
# do a spatial intersection to ensure Census tracts touching but outside the boundaries are excluded
sub.area <- filter( m, grepl( msas[i], NAME ) ) # obtain cartographic boundary geometries
s <- st_within( dat, sub.area ) # spatial overlay
these <- map_lgl( s, function( x ) {        # logical for rows to keep
if ( length( x ) == 1 ) {
return( TRUE )
} else {
return( FALSE )
}
} )
# final subset to remove boundary Census tracts outside MSA
dat <- dat[ these, ]
# save in parent dir
saveRDS( dat , paste0( msa.file[i], "-MSA.rds" ))
## Dorling Cartogram transformation and save in subfolder
setwd( "Dorling-Datasets" ) # save sf projection for Dorling Cartogram in a subfolder
dat$pop.w <- dat$pop /  max( dat$pop, na.rm = T )   # standardizes it by max weight
d.dorling <- cartogram_dorling( x = dat, weight = "pop.w" , k = 0.05 ) # projects to Dorling Cartogram
saveRDS( d.dorling , paste0( msa.file[i], "-Dorling.rds" ))
setwd( ".." ) # back up to parent dir
end.time <- Sys.time()
# update log/metadata
Iteration <- i
MSA <- as.character( levels( factor( dat$MSA ) )[1] )
No.Tracts <- as.character( nrow( dat ) )
Pop <- as.character( sum( dat$pop, na.rm = T ) )
No.NPO <- as.character( sum( dat$n, na.rm = T ) )
Save.Time <- as.character( end.time - start.time )
log <- c( Iteration, MSA, No.Tracts, Pop, No.NPO, Save.Time)
log <- paste( log, collapse = "\t" )
write( log, file = "MSA-Data-Log.txt", append = T, sep = "\t" )
print( end.time - start.time)
print( paste0( "Iteration ", i, "/", length( msa.file ), " complete" ) )
}
msa.file
