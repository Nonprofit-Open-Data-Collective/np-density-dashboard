if( is.null( net.assets )==F & is.null( total.assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( net.assets )==T & is.null( total.assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
a <- df[[ net.assets ]]
t <- df[[ total.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Total assets cannot be zero: ", sum( t==0 ), " cases have been replaced with NA." ) )
t[ t == 0 ] <- NA
er <- a / t
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( er, top.p, na.rm=T )
bottom   <- quantile( er, bottom.p, na.rm=T )
er.w    <- er
er.w[ er.w > top    ] <- top
er.w[ er.w < bottom ] <- bottom
er.n <- scale( er.w )
er.p <- dplyr::ntile( er, 100 )
ER <- data.frame( er, er.w, er.n, er.p )
print( summary( ER ) )
par( mfrow=c(2,2) )
plot( density(er,   na.rm=T), main="Equity Ratio (ER)" )
plot( density(er.w, na.rm=T), main="ER Winsorized" )
plot( density(er.n, na.rm=T), main="ER Standardized as Z" )
plot( density(er.p, na.rm=T), main="ER as Percentile" )
df.er <- cbind( df, ER )
return( df.er )
}
# numerator not specified
d <- get_er( df = dat, net.assets = 'x1', total.assets = NULL )
#' # numerator not specified
#' d <- get_er( df = dat, net.assets = 'x1', total.assets = NULL )
#'
#' # denominator not specified
#' d <- get_er( df = dat, net.assets = NULL, total.assets = 'x2' )
#'
#' # neither numerator nor denominator specified
#' d <- get_er( df = dat, net.assets = NULL, total.assets = NULL )
#'
#' @export
get_er <- function( df, net.assets = 'NAFB_TOT_EOY', total.assets = 'ASSET_TOT_EOY', winsorize=0.98 )
{
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( total.assets )==T & is.null( net.assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( total.assets )==F & is.null( net.assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( total.assets )==T & is.null( net.assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
a <- df[[ net.assets ]]
t <- df[[ total.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Total assets cannot be zero: ", sum( t==0 ), " cases have been replaced with NA." ) )
t[ t == 0 ] <- NA
er <- a / t
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( er, top.p, na.rm=T )
bottom   <- quantile( er, bottom.p, na.rm=T )
er.w    <- er
er.w[ er.w > top    ] <- top
er.w[ er.w < bottom ] <- bottom
er.n <- scale( er.w )
er.p <- dplyr::ntile( er, 100 )
ER <- data.frame( er, er.w, er.n, er.p )
print( summary( ER ) )
par( mfrow=c(2,2) )
plot( density(er,   na.rm=T), main="Equity Ratio (ER)" )
plot( density(er.w, na.rm=T), main="ER Winsorized" )
plot( density(er.n, na.rm=T), main="ER Standardized as Z" )
plot( density(er.p, na.rm=T), main="ER as Percentile" )
df.er <- cbind( df, ER )
return( df.er )
}
# numerator not specified
d <- get_er( df = dat, net.assets = 'x1', total.assets = NULL )
#' # numerator not specified
#' d <- get_er( df = dat, net.assets = 'x1', total.assets = NULL )
#'
#' # denominator not specified
#' d <- get_er( df = dat, net.assets = NULL, total.assets = 'x2' )
#'
#' # neither numerator nor denominator specified
#' d <- get_er( df = dat, net.assets = NULL, total.assets = NULL )
#'
#' @export
get_er <- function( df, net.assets = 'NAFB_TOT_EOY', total.assets = 'ASSET_TOT_EOY', winsorize=0.98 )
{
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( net.assets )==T & is.null( total.assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( net.assets )==F & is.null( total.assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( net.assets )==T & is.null( total.assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
a <- df[[ net.assets ]]
t <- df[[ total.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Total assets cannot be zero: ", sum( t==0 ), " cases have been replaced with NA." ) )
t[ t == 0 ] <- NA
er <- a / t
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( er, top.p, na.rm=T )
bottom   <- quantile( er, bottom.p, na.rm=T )
er.w    <- er
er.w[ er.w > top    ] <- top
er.w[ er.w < bottom ] <- bottom
er.n <- scale( er.w )
er.p <- dplyr::ntile( er, 100 )
ER <- data.frame( er, er.w, er.n, er.p )
print( summary( ER ) )
par( mfrow=c(2,2) )
plot( density(er,   na.rm=T), main="Equity Ratio (ER)" )
plot( density(er.w, na.rm=T), main="ER Winsorized" )
plot( density(er.n, na.rm=T), main="ER Standardized as Z" )
plot( density(er.p, na.rm=T), main="ER as Percentile" )
df.er <- cbind( df, ER )
return( df.er )
}
# numerator not specified
d <- get_er( df = dat, net.assets = NULL, total.assets = 'x2' )
# denominator not specified
d <- get_er( df = dat, net.assets = 'x1', total.assets = NULL )
# neither numerator nor denominator specified
d <- get_er( df = dat, net.assets = NULL, total.assets = NULL )
@export
#' # numerator not specified
#' d <- get_dmr( df = dat, liabilities = 'x1', net.assets = NULL )
#'
#' # denominator not specified
#' d <- get_dmr( df = dat, liabilities = NULL, net.assets = 'x2' )
#'
#' # neither numerator nor denominator specified
#' d <- get_dmr( df = dat, liabilities = NULL, net.assets = NULL )
#'
#' @export
get_dmr <- function( df, liabilities = 'LIAB_TOT_EOY', net.assets = 'NAFB_UNRESTRICT_EOY', winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( liabilities )==T & is.null( net.assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( liabilities )==F & is.null( net.assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( liabilities )==T & is.null( net.assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
l <- df[[ liabilities ]]
n <- df[[ net.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Unrestricted net assets cannot be equal to zero: ", sum( n==0 ), " cases have been replaced with NA." ) )
n[ n == 0 ] <- NA
dmr <- l / n
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dmr, top.p, na.rm=T )
bottom   <- quantile( dmr, bottom.p, na.rm=T )
dmr.w    <- dmr
dmr.w[ dmr.w > top    ] <- top
dmr.w[ dmr.w < bottom ] <- bottom
dmr.n <- scale( dmr.w )
dmr.p <- dplyr::ntile( dmr, 100 )
DMR <- data.frame( dmr, dmr.w, dmr.n, dmr.p )
print( summary( DMR ) )
par( mfrow=c(2,2) )
plot( density(dmr,   na.rm=T), main="Debt Management Ratio (DMR)" )
plot( density(dmr.w, na.rm=T), main="DMR Winsorized" )
plot( density(dmr.n, na.rm=T), main="DMR Standardized as Z" )
plot( density(dmr.p, na.rm=T), main="DMR as Percentile" )
df.dmr <- cbind( df, DMR )
return( df.dmr )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_dmr( df = dat, liabilities="x1", net.assets="x2" )
head( d )
# run with default column names
dat_01 <- dat
colnames( dat_01 ) <- c( 'LIAB_TOT_EOY', 'NAFB_UNRESTRICT_EOY' )
d <- get_dmr( dat_01 )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_dmr( df = dat, liabilities = "x1", net.assets ="x2", winsorize=0.95 )
d <- get_dmr( dat_01, winsorize = 0.95 )
# numerator not specified
d <- get_dmr( df = dat, liabilities = 'x1', net.assets = NULL )
# denominator not specified
d <- get_dmr( df = dat, liabilities = NULL, net.assets = 'x2' )
# neither numerator nor denominator specified
d <- get_dmr( df = dat, liabilities = NULL, net.assets = NULL )
# numerator not specified
d <- get_dmr( df = dat, liabilities = 'x1', net.assets = NULL )
# numerator not specified
d <- get_dmr( df = dat, liabilities = NULL, net.assets = 'x2' )
# denominator not specified
d <- get_dmr( df = dat, liabilities = 'x1', net.assets = NULL )
# neither numerator nor denominator specified
d <- get_dmr( df = dat, liabilities = NULL, net.assets = NULL )
#' # numerator not specified
#' d <- get_dar( df = dat, debt = 'x1', assets = NULL )
#'
#' # denominator not specified
#' d <- get_dar( df = dat, debt = NULL, assets = 'x2' )
#'
#' # neither numerator nor denominator specified
#' d <- get_dar( df = dat, debt = NULL, assets = NULL )
#'
#' @export
get_dar <- function( df, debt = 'LIAB_TOT_EOY', assets = 'ASSET_TOT_EOY', winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( debt )==T & is.null( assets )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==F & is.null( assets )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==T & is.null( assets )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
d <- df[[ debt ]]
a <- df[[ assets ]]
# can't divide by zero
print( paste0( "Assets cannot be equal to zero: ", sum( a==0 ), " cases have been replaced with NA." ) )
a[ a == 0 ] <- NA
dar <- d / a
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dar, top.p, na.rm=T )
bottom   <- quantile( dar, bottom.p, na.rm=T )
dar.w    <- dar
dar.w[ dar.w > top    ] <- top
dar.w[ dar.w < bottom ] <- bottom
dar.z <- scale( dar.w )
dar.p <- dplyr::ntile( dar, 100 )
DAR <- data.frame( dar, dar.w, dar.z, dar.p )
print( summary( DAR ) )
par( mfrow=c(2,2) )
plot( density(dar,   na.rm=T), main="Debt to Asset Ratio (DAR)" )
plot( density(dar.w, na.rm=T), main="DAR Winsorized" )
plot( density(dar.z, na.rm=T), main="DAR Standardized as Z" )
plot( density(dar.p, na.rm=T), main="DAR as Percentile" )
df.dar <- cbind( df, DAR )
return( df.dar )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_dar( df = dat, debt = "x1", assets = "x2" )
head( d )
# run with default column names
dat_01 <- dat
colnames( dat_01 ) <- c( 'LIAB_TOT_EOY', 'ASSET_TOT_EOY' )
d <- get_dar( dat_01 )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_dar( df = dat, debt = "x1", assets ="x2", winsorize=0.95 )
d <- get_dar( dat_01, winsorize = 0.95 )
# numerator not specified
d <- get_dar( df = dat, debt = 'x1', assets = NULL )
# numerator not specified
d <- get_dar( df = dat, debt = NULL, assets = 'x2' )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_der( df = dat, debt = "x1", equity = "x2" )
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_der( df=dat, debt="x1", equity="x2" )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_der( df=dat, debt="x1", equity="x2", winsorize=0.95 )
#'
#' @export
get_der <- function( df, debt = 'LIAB_ACC_PAYABLE_EOY', equity = 'NAFB_UNRESTRICT_EOY', winsorize=0.98 )
{
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( debt )==T & is.null( equity )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==F & is.null( equity )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==T & is.null( equity )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
d <- df[[ debt ]]
e <- df[[ equity ]]
# can't divide by zero
print( paste0( "Unrestricted net assets cannot be equal to zero: ", sum( a==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
der <- d / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( der, top.p, na.rm=T )
bottom   <- quantile( der, bottom.p, na.rm=T )
der.w    <- der
der.w[ der.w > top    ] <- top
der.w[ der.w < bottom ] <- bottom
der.n <- scale( der.w )
der.p <- dplyr::ntile( der, 100 )
DER <- data.frame( der, der.w, der.n, der.p )
print( summary( DER ) )
par( mfrow=c(2,2) )
plot( density(der,   na.rm=T), main="Debt to Equity Ratio (DER)" )
plot( density(der.w, na.rm=T), main="DER Winsorized" )
plot( density(der.n, na.rm=T), main="DER Standardized as Z" )
plot( density(der.p, na.rm=T), main="DER as Percentile" )
df.der <- cbind( df, DER )
return( df.der )
}
# specify own column names
d <- get_der( df = dat, debt = "x1", equity = "x2" )
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_der( df=dat, debt="x1", equity="x2" )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_der( df=dat, debt="x1", equity="x2", winsorize=0.95 )
#'
#' @export
get_der <- function( df, debt = 'LIAB_ACC_PAYABLE_EOY', equity = 'NAFB_UNRESTRICT_EOY', winsorize=0.98 )
{
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( debt )==T & is.null( equity )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==F & is.null( equity )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( debt )==T & is.null( equity )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
d <- df[[ debt ]]
e <- df[[ equity ]]
# can't divide by zero
print( paste0( "Equity cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
der <- d / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( der, top.p, na.rm=T )
bottom   <- quantile( der, bottom.p, na.rm=T )
der.w    <- der
der.w[ der.w > top    ] <- top
der.w[ der.w < bottom ] <- bottom
der.n <- scale( der.w )
der.p <- dplyr::ntile( der, 100 )
DER <- data.frame( der, der.w, der.n, der.p )
print( summary( DER ) )
par( mfrow=c(2,2) )
plot( density(der,   na.rm=T), main="Debt to Equity Ratio (DER)" )
plot( density(der.w, na.rm=T), main="DER Winsorized" )
plot( density(der.n, na.rm=T), main="DER Standardized as Z" )
plot( density(der.p, na.rm=T), main="DER as Percentile" )
df.der <- cbind( df, DER )
return( df.der )
}
# specify own column names
d <- get_der( df = dat, debt = "x1", equity = "x2" )
head( d )
# run with default column names
dat_01 <- dat
colnames( dat_01 ) <- c( 'NAFB_TOT_EOY', 'ASSET_TOT_EOY' )
d <- get_der( dat_01 )
colnames( dat_01 ) <- c( 'LIAB_ACC_PAYABLE_EOY', 'NAFB_UNRESTRICT_EOY' )
d <- get_der( dat_01 )
# specify own column names
d <- get_der( df = dat, debt = "x1", equity = "x2" )
# winsorize at 0.025 and 0.975 pdercentiles instead of 0.01 and 0.99
d <- get_der( df = dat, debt = "x1", equity ="x2", winsorize=0.95 )
d <- get_der( dat_01, winsorize = 0.95 )
# numderator not specified
d <- get_der( df = dat, debt = NULL, equity = 'x2' )
# numerator not specified
d <- get_der( df = dat, debt = NULL, equity = 'x2' )
# denominator not specified
d <- get_der( df = dat, debt = 'x1', equity = NULL )
# neithder numderator nor denominator specified
d <- get_der( df = dat, debt = NULL, equity = NULL )
part10<-read.csv('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P10-T00-BALANCE-SHEET.csv')
part09<-read.csv('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P09-T00-EXPENSES.csv')
part0910<-data.frame(left_join( part09,part10))
part08<-read.csv('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P08-T00-REVENUE.csv')
part0810<-data.frame(left_join( part09,part10))%>%
left_join(.,part08)
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_ssr( df=dat, prog.serv.rev='x1', total.expense='x2' )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_ssr( df=dat, prog.serv.rev='x1', total.expense='x2', winsorize=0.95 )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = 'F9_08_REV_PROG_TOT_TOT', total.expense = 'F9_09_EXP_TOT_TOT', winsorize=0.98 )
{
p <- df[[ prog.serv.rev ]]
e <- df[[ total.expense ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- cbind( df, SSR )
return( df.ssr )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
# specify own column names
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense = "x2" )
head( d )
# run with default column names
dat_01 <- dat
# run with default column names
dat_01 <- dat
colnames( dat_01 ) <- c( 'F9_08_REV_PROG_TOT_TOT', 'F9_09_EXP_TOT_TOT' )
d <- get_ssr( dat_01 )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_ssr( df = dat, prog.serv.rev = "x1", total.expense ="x2", winsorize=0.95 )
d <- get_ssr( dat_01, winsorize = 0.95 )
# numerator not specified
d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = 'x2' )
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_ssr( df=dat, prog.serv.rev='x1', total.expense='x2' )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_ssr( df=dat, prog.serv.rev='x1', total.expense='x2', winsorize=0.95 )
#'
#' @export
get_ssr <- function( df, prog.serv.rev = 'F9_08_REV_PROG_TOT_TOT', total.expense = 'F9_09_EXP_TOT_TOT', winsorize=0.98 )
{
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==F )
{ stop( "The numerator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==F & is.null( total.expense )==T )
{ stop( "The denominator has been incorrectly specified. Ensure you are passing the correct data field to the correct argument." ) }
if( is.null( prog.serv.rev )==T & is.null( total.expense )==T )
{ stop( "The argument fields are empty. Please supply column names for each argument or execute the function with default inputs." ) }
p <- df[[ prog.serv.rev ]]
e <- df[[ total.expense ]]
# can't divide by zero
print( paste0( "Total expenses cannot be equal to zero: ", sum( e==0 ), " cases have been replaced with NA." ) )
e[ e == 0 ] <- NA
ssr <- p / e
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( ssr, top.p, na.rm=T )
bottom   <- quantile( ssr, bottom.p, na.rm=T )
ssr.w    <- ssr
ssr.w[ ssr.w > top    ] <- top
ssr.w[ ssr.w < bottom ] <- bottom
ssr.n <- scale( ssr.w )
ssr.p <- dplyr::ntile( ssr, 100 )
SSR <- data.frame( ssr, ssr.w, ssr.n, ssr.p )
print( summary( SSR ) )
par( mfrow=c(2,2) )
plot( density(ssr,   na.rm=T), main="Self Sufficiency Ratio (SSR)" )
plot( density(ssr.w, na.rm=T), main="SSR Winsorized" )
plot( density(ssr.n, na.rm=T), main="SSR Standardized as Z" )
plot( density(ssr.p, na.rm=T), main="SSR as Percentile" )
df.ssr <- cbind( df, SSR )
return( df.ssr )
}
# numerator not specified
d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = 'x2' )
# denominator not specified
d <- get_ssr( df = dat, prog.serv.rev = 'x1', total.expense = NULL )
neither numerator nor denominator specified
# neither numerator nor denominator specified
d <- get_ssr( df = dat, prog.serv.rev = NULL, total.expense = NULL )
part0810$F9_01_REV_CONTR_TOT_CY_V2
